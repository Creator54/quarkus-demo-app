# Application name and version
quarkus.application.name=quarkus-app
quarkus.application.version=1.0.0

# Ingestion key for authentication(Only if using Signoz Cloud)
quarkus.otel.exporter.otlp.headers=${OTEL_EXPORTER_OTLP_HEADERS:}

# Enable OpenTelemetry
quarkus.otel.sdk.disabled=false

# Traces Configuration
quarkus.otel.traces.enabled=true
quarkus.otel.traces.sampler=parentbased_always_on
quarkus.otel.traces.sampler.arg=1.0
quarkus.otel.traces.exporter=otlp

# OTLP Exporter Configuration
quarkus.otel.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT}
quarkus.otel.exporter.otlp.traces.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT}/v1/traces
quarkus.otel.exporter.otlp.protocol=http/protobuf

# Metrics Configuration
quarkus.otel.metrics.enabled=true
quarkus.otel.exporter.otlp.metrics.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT}/v1/metrics
quarkus.otel.metrics.exporter=otlp

# Logging Configuration
quarkus.otel.logs.enabled=true
quarkus.otel.exporter.otlp.logs.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT}/v1/logs
quarkus.otel.logs.exporter=otlp

quarkus.log.level=INFO
quarkus.log.category."io.opentelemetry".level=INFO

# Console logging with trace context
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId} [%c{2.}] (%t) %s%e%n

# File logging with trace context (optional)
quarkus.log.file.enable=true
quarkus.log.file.path=logs/application.log
quarkus.log.file.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId} [%c{3.}] (%t) %s%e%n

# Resource Attributes
quarkus.otel.resource.attributes=${OTEL_RESOURCE_ATTRIBUTES}
